name: Cargo Build & Test

on:
  push:
  pull_request:

env: 
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  CARGO_TERM_VERBOSE: true

jobs:
  build:
    name: Build - ${{ matrix.toolchain }} - ${{ matrix.package }} - ${{ matrix.features }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, beta]
        include:
          # kameo crate with different feature combinations
          - package: "kameo"
            features: "--no-default-features"
          - package: "kameo"
            features: "--no-default-features --features macros"
          - package: "kameo"
            features: "--no-default-features --features tracing"
          - package: "kameo"
            features: "--no-default-features --features remote"
          - package: "kameo"
            features: "--no-default-features --features macros,tracing"
          - package: "kameo"
            features: "--no-default-features --features macros,remote"
          - package: "kameo"
            features: "--no-default-features --features tracing,remote"
          - package: "kameo"
            features: "--all-features"
          # kameo_actors crate (no additional features)
          - package: "kameo_actors"
            features: ""
          # kameo_macros crate (no additional features)
          - package: "kameo_macros"
            features: ""
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
      
      - name: Standard build
        run: cargo build -p ${{ matrix.package }} ${{ matrix.features }}
        
      - name: Tokio unstable build
        if: matrix.package == 'kameo'
        run: RUSTFLAGS="--cfg tokio_unstable" cargo build -p ${{ matrix.package }} ${{ matrix.features }}

  test:
    name: Test - ${{ matrix.toolchain }} - ${{ matrix.package }} - ${{ matrix.features }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, beta]
        include:
          # kameo crate with different feature combinations
          - package: "kameo"
            features: "--no-default-features"
          - package: "kameo"
            features: "--no-default-features --features macros"
          - package: "kameo"
            features: "--no-default-features --features tracing"
          - package: "kameo"
            features: "--no-default-features --features remote"
          - package: "kameo"
            features: "--no-default-features --features macros,tracing"
          - package: "kameo"
            features: "--no-default-features --features macros,remote"
          - package: "kameo"
            features: "--no-default-features --features tracing,remote"
          - package: "kameo"
            features: "--all-features"
          # kameo_actors crate (no additional features)
          - package: "kameo_actors"
            features: ""
          # kameo_macros crate (no additional features)
          - package: "kameo_macros"
            features: ""
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
      
      - name: Run tests
        run: cargo test -p ${{ matrix.package }} ${{ matrix.features }}

  lint:
    name: Clippy - ${{ matrix.package }} - ${{ matrix.features }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # kameo crate with different feature combinations
          - package: "kameo"
            features: "--no-default-features"
          - package: "kameo"
            features: "--no-default-features --features macros"
          - package: "kameo"
            features: "--no-default-features --features tracing"
          - package: "kameo"
            features: "--no-default-features --features remote"
          - package: "kameo"
            features: "--no-default-features --features macros,tracing"
          - package: "kameo"
            features: "--no-default-features --features macros,remote"
          - package: "kameo"
            features: "--no-default-features --features tracing,remote"
          - package: "kameo"
            features: "--all-features"
          # kameo_actors crate (no additional features)
          - package: "kameo_actors"
            features: ""
          # kameo_macros crate (no additional features)
          - package: "kameo_macros"
            features: ""
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-stable-
      
      - name: Run clippy
        run: cargo clippy -p ${{ matrix.package }} ${{ matrix.features }}

  # Additional job to run workspace-wide checks
  workspace:
    name: Workspace checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy, rustfmt
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-stable-
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy on workspace
        run: cargo clippy --workspace --all-features
      
      - name: Run tests on workspace
        run: cargo test --workspace --all-features
